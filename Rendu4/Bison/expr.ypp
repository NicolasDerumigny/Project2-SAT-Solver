%{
#include <cstdio>
#include <iostream>

#include "expr.hpp"

// stuff from flex that bison needs to know about:
extern "C" int yylex();

void yyerror(const char *s);

Expr *res = NULL;
%}

// Bison fundamentally works by asking flex to get the next token, which it
// returns as an object of type "yystype".  But tokens could be of any
// arbitrary data type!  So we deal with that in Bison by defining a C union
// holding each of the types of tokens that Flex could return, and have Bison
// use that union instead of "int" for the definition of "yystype":
%union {
    int ival;
    class Expr *exp;
}

%start input

// define the "terminal symbol" token types I'm going to use (in CAPS
// by convention), and associate each with a field of the union:
%token TK_CONJ TK_DISJ TK_XOR TK_IMPLY TK_EQ
%token TK_LPAREN TK_RPAREN TK_ENOT TK_VNOT
%token <ival> TK_VAR
%type <exp> expression

%left TK_CONJ
%left TK_DISJ
%left TK_XOR
%left TK_EQ
%left TK_IMPLY
%left TK_ENOT

%%
// this is the actual grammar that bison will parse, but for right now it's just
// something silly to echo to the screen what bison gets from flex.  We'll
// make a real one shortly:

input: expression TK_CONJ { res = $1; }
     ;

expression:
     TK_VAR                                     { $$ = new EConst($1);              }
    | TK_VNOT TK_VAR                            { $$ = new VNot($2);                }
    | TK_LPAREN expression TK_RPAREN            { $$ = $2;                          }
    | expression TK_CONJ expression             { $$ = new EConj($1, $3);           }
    | expression TK_DISJ expression             { $$ = new EDisj($1, $3);           }
    | TK_ENOT expression                        { $$ = new ENot($2);                }
    | expression TK_XOR expression              { $$ = new EXor($1, $3);            }
    | expression TK_IMPLY expression            { $$ = new EImply($1, $3);          }
    | expression TK_EQ expression               { $$ = new EEq($1, $3);             }
    ;
%%

